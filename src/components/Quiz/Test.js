import React from "react";
import "./Quiz.scss";
import SensorChart from "../SensorChart/SensorChart";
const quiz = {
  topic: "Javascript",
  level: "Beginner",
  totalQuestions: 10,
  perQuestionScore: 5,
  totalTime: 60, // in seconds
  questions: [
    {
      question:
        "–í —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —É –í–∞—Å –µ—Å—Ç—å –¥–≤–∞ –∏–ª–∏ –±–æ–ª–µ–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤, –∫–∞–∫ –í—ã –≤—ã–±–µ—Ä–µ—Ç–µ –∫—Ä–µ–¥–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–æ–¥–Ω–µ–µ –ø–æ–≥–∞—à–∞—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å? ",
      choices: [
        "—Å—Ä–∞–≤–Ω—é —Å—Ç–∞–≤–∫–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –∏ –≤—ã–±–µ—Ä—É —Ç–æ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ç–∞–≤–∫–∞ –≤—ã—à–µ",
        "—Å—Ä–∞–≤–Ω—é –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –∏ –≤—ã–±–µ—Ä—É —Ç–æ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –≤—ã—à–µ",
        "–≤—ã–ø–æ–ª–Ω—é –ø—É–Ω–∫—Ç—ã —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ",
        "–±—Ä–æ—à—É –º–æ–Ω–µ—Ç–∫—É üòä",
        "–Ω–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
      ],
      inputType: "checkbox",
      correctAnswer: [
        "—Å—Ä–∞–≤–Ω—é —Å—Ç–∞–≤–∫–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –∏ –≤—ã–±–µ—Ä—É —Ç–æ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ç–∞–≤–∫–∞ –≤—ã—à–µ",
        "—Å—Ä–∞–≤–Ω—é –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –∏ –≤—ã–±–µ—Ä—É —Ç–æ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –≤—ã—à–µ",
      ],
    },
    {
      question:
        "Which of the following keywords is used to define a variable in Javascript?",
      choices: ["var", "let", "var and let", "None of the above"],
      inputType: "checkbox",
      correctAnswer: ["var and let"],
    },
    {
      question:
        "Which of the following methods can be used to display data in some form using Javascript?",
      choices: [
        "document.write()",
        "console.log()",
        "window.alert",
        "All of the above",
      ],
      inputType: "radio",
      correctAnswer: "All of the above",
    },
    {
      question: "How can a datatype be declared to be a constant type?",
      choices: ["const", "var", "let", "constant"],
      inputType: "radio",
      correctAnswer: "const",
    },
  ],
};

const Test = () => {
  const [activeQuestion, setActiveQuestion] = React.useState(0);
  const [selectedAnswer, setSelectedAnswer] = React.useState([]);
  const [showResult, setShowResult] = React.useState(false);
  const [selectedAnswerIndex, setSelectedAnswerIndex] = React.useState(null);
  const [result, setResult] = React.useState({
    score: 0,
    correctAnswers: 0,
    wrongAnswers: 0,
  });

  const { questions } = quiz;
  const { question, choices, correctAnswer, inputType } =
    questions[activeQuestion];

  const onClickNext = () => {
    setSelectedAnswer([]);
    setSelectedAnswerIndex(null);
    setResult((prev) =>
      selectedAnswer
        ? {
            ...prev,
            score: prev.score + 5,
            correctAnswers: prev.correctAnswers + 1,
          }
        : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }
    );
    if (activeQuestion !== questions.length - 1) {
      setActiveQuestion((prev) => prev + 1);
    } else {
      setActiveQuestion(0);
      setShowResult(true);
    }
  };

  // let checking = [];
  const onAnswerSelected = (answer, index) => {
    setSelectedAnswerIndex(selectedAnswer.push(answer));
    console.log(selectedAnswer);

    // if (selectedAnswer.length === correctAnswer.length) {
    //   for (let k = 0; k < selectedAnswer.length; k--) {
    //     for (let i = 0; i < selectedAnswer.length; i++) {
    //       for (let j = 0; j < correctAnswer.length; j++) {
    //         if (selectedAnswer[i] === correctAnswer[j]) {
    //           checking = checking.push(selectedAnswer[i]);
    //         } else {
    //           console.log("—Ö—É–π–Ω—è –∫–∞–∫–∞—è —Ç–æ");
    //         }
    //       }
    //     }
    //     if (correctAnswer.toString() === checking.toString()) {
    //       console.log("–∑–∞–µ–±–∏—Å—å");
    //     }
    //   }
    //   console.log("–ü—Ä–æ–≤–µ—Ä—è—é");
    // } else {
    //   console.log("—Ö–µ—Ä–Ω—è");
    // }
  };

  // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`);
  let activeNum = activeQuestion + 1;
  let dynamicWidth = "calc(100% * " + activeNum + "/" + questions.length + ")";

  return (
    <div className="quiz-container">
      <h2>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏</h2>
      {!showResult ? (
        <div className="testingBlock">
          <h3>
            {activeNum}. {question}
          </h3>
          <form className="answers_block">
            {choices.map((answer, index) => (
              <div className="form_check">
                <input
                  onChange={() => onAnswerSelected(answer, index)}
                  key={answer}
                  className={
                    selectedAnswerIndex === index
                      ? "selected-answer firstTestForm"
                      : "firstTestForm"
                  }
                  data-number={index}
                  type={inputType}
                  name="inputDefault"
                  id={`inputDefault` + index}
                />
                <label
                  htmlFor={`inputDefault` + index}
                  className="form_check_label"
                >
                  {answer}
                </label>
              </div>
            ))}
          </form>
          <div className="answers-info">
            {inputType === "checkbox"
              ? "* - –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
              : ""}
          </div>
          <div className="flex-right">
            <button
              onClick={onClickNext}
              disabled={selectedAnswerIndex === null}
            >
              {activeQuestion === questions.length - 1 ? "–ó–∞–≤–µ—Ä—à–∏—Ç—å" : "–î–∞–ª—å—à–µ"}
            </button>
          </div>
          <div className="progress-bar" id="progress-bar">
            <div
              id="progressBarFull"
              style={{
                width: dynamicWidth,
              }}
            ></div>
          </div>
          <div className="progress-counter">
            <span className="active-question-no">{activeQuestion + 1}</span>
            <span className="total-question">
              &nbsp;–∏–∑&nbsp;{questions.length}
            </span>
          </div>
        </div>
      ) : (
        <div className="result">
          <SensorChart />
        </div>
      )}
    </div>
  );
};

export default Test;
